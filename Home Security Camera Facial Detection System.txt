README DocumentHome Security Camera Facial Detection SystemAuthors: Jean Rene, Abdou Aziz GajigoCourse: Artificial IntelligenceProject OverviewThis project focuses on a binary classification task to identify whether a person in an image is a "Homeowner" or a "Stranger" using a Convolutional Neural Network (CNN). The project uses TensorFlow and Keras to demonstrate image preprocessing, data augmentation, CNN architecture design, model training, evaluation, and predictions.Key Features1. Image Preprocessing:* Images are resized to a consistent size of 200x200 pixels.* Pixel values are rescaled to the range [0, 1].2. Model Architecture:* A CNN with three convolutional layers and max-pooling.* Fully connected layers for feature extraction and binary classification.* Activation function:* ReLU for hidden layers.* Sigmoid for the output layer.3. Data Handling:* Training and validation datasets are generated using the ImageDataGenerator.* Batch processing is employed for efficient training.4. Model Training:* Trained using binary cross-entropy loss.* RMSprop optimizer with a learning rate of 0.001.* Performance metrics include accuracy.5. Prediction and Visualization:* The trained model is used to predict new test images.* Predicted results are displayed alongside their corresponding images.6. Model Saving and Loading:* The trained model is saved as my_model.h5 for later use.* Supports loading the model to make predictions on new data.Setup InstructionsPrerequisites* Install the following Python libraries:* TensorFlow* NumPy* Matplotlib* OpenCV* Pillow* shutilDirectory StructurebashCopy code/faces    /training        /Homeowner        /Stranger    /validation        /Homeowner        /Stranger    /testing    kai.jpg* Replace the directory paths in the script with your actual file paths.Execution Steps1. Preprocess and Augment Data* The ImageDataGenerator preprocesses the training and validation datasets by:* Rescaling pixel values.* Preparing batches for the CNN.1. Train the Model* Execute the script to train the CNN model on the preprocessed data.* Monitor the model's training accuracy and validation performance.1. Test the Model* Place test images in the faces/testing directory.* The script will:* Resize and preprocess each image.* Use the trained model to predict whether the person is a "Homeowner" or "Stranger."* Display predictions alongside images.1. Save and Load the Model* The trained model is saved as my_model.h5 in the specified directory.* Use the provided load_model function to reload the model for future use.Code Customization* Adjust Training Parameters: Modify the epochs and batch_size for different training durations and resource allocations.* Add New Classes: Extend the class_labels dictionary and ensure the directory structure aligns with the new classes.* Fine-tune the Model: Experiment with additional layers, optimizers, or learning rates to improve performance.How to Run the Code1. Ensure the required libraries are installed.2. Update directory paths in the script to match your system.3. Run the Python script in a suitable IDE or terminal.Example:bashpython face_classification.pyVisualization* After predictions, the script displays images in a grid with their predicted labels ("Homeowner" or "Stranger").